(*
 * Copyright 2003-2006 Savonet team
 *
 * This file is part of Ocaml-speex.
 *
 * Ocaml-speex is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Ocaml-speex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Ocaml-speex; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *)

(**
  * Functions for decoding speex files using libspeex.
  *
  * @author Romain Beauxis
  *)

exception Invalid_frame_size
exception End_of_stream

type mode = Narrowband | Wideband | Ultra_wideband

(* Generated by control_define *)
type control =
  SPEEX_SET_ENH |
  SPEEX_GET_ENH |
  SPEEX_GET_FRAME_SIZE |
  SPEEX_SET_QUALITY |
  SPEEX_SET_MODE |
  SPEEX_GET_MODE |
  SPEEX_SET_LOW_MODE |
  SPEEX_GET_LOW_MODE |
  SPEEX_SET_HIGH_MODE |
  SPEEX_GET_HIGH_MODE |
  SPEEX_SET_VBR |
  SPEEX_GET_VBR |
  SPEEX_SET_VBR_QUALITY |
  SPEEX_GET_VBR_QUALITY |
  SPEEX_SET_COMPLEXITY |
  SPEEX_GET_COMPLEXITY |
  SPEEX_SET_BITRATE |
  SPEEX_GET_BITRATE |
  SPEEX_SET_HANDLER |
  SPEEX_SET_USER_HANDLER |
  SPEEX_SET_SAMPLING_RATE |
  SPEEX_GET_SAMPLING_RATE |
  SPEEX_GET_RELATIVE_QUALITY |
  SPEEX_SET_VAD |
  SPEEX_GET_VAD |
  SPEEX_SET_ABR |
  SPEEX_GET_ABR |
  SPEEX_SET_DTX |
  SPEEX_GET_DTX |
  SPEEX_SET_SUBMODE_ENCODING |
  SPEEX_GET_SUBMODE_ENCODING |
  SPEEX_GET_LOOKAHEAD |
  SPEEX_SET_PLC_TUNING |
  SPEEX_GET_PLC_TUNING |
  SPEEX_SET_VBR_MAX_BITRATE |
  SPEEX_GET_VBR_MAX_BITRATE |
  SPEEX_SET_HIGHPASS |
  SPEEX_GET_HIGHPASS |
  SPEEX_GET_ACTIVITY

module Header :
sig
 
  type t = 
    { id:                     string;
      version:                string;
      version_id:             int;
      header_size:            int; 
      rate:                   int;
      mode:                   mode;
      mode_bitstream_version: int;
      nb_channels:            int;
      bitrate:                int;
      frame_size:             int;
      vbr:                    bool;
      frames_per_packet:      int;
      extra_headers:          int
    }

  (* Defined in speex_header.h *)
  val header_string_length : int
  val header_version_length : int

  val init :
    ?frames_per_packet:int ->
    ?mode:mode ->
    ?vbr:bool -> nb_channels:int -> bitrate:int -> rate:int -> unit -> t 

  val encode_header : t -> (string*string) list -> Ogg.Stream.t -> unit

  val header_of_packet : Ogg.Stream.packet -> t

  val comments_of_packet : Ogg.Stream.packet -> string*((string*string) list)

end

module Encoder :
sig

  type t

  val init : mode -> int -> t

  val get : t -> control -> int

  val set : t -> control -> int -> unit

  val encode_page : t -> Ogg.Stream.t -> (unit -> float array) -> Ogg.Page.t

  val encode_page_stereo : t -> Ogg.Stream.t -> (unit -> float array array) -> Ogg.Page.t

  val encode_page_int : t -> Ogg.Stream.t -> (unit -> int array) -> Ogg.Page.t

  val encode_page_int_stereo : t -> Ogg.Stream.t -> (unit -> int array array) -> Ogg.Page.t

  val eos : t -> Ogg.Stream.t -> unit 

end

module Decoder :
sig

  type t
  
  val init : mode -> t

  val get : t -> control -> int

  val set : t -> control -> int -> unit

  val decode : t -> Ogg.Stream.t -> float array list

  val decode_stereo : t -> Ogg.Stream.t -> float array array list

  val decode_feed : t -> Ogg.Stream.t -> (float array -> unit) -> unit

  val decode_feed_stereo : t -> Ogg.Stream.t -> (float array array -> unit) -> unit

  val decode_int : t -> Ogg.Stream.t -> int array list

  val decode_int_stereo : t -> Ogg.Stream.t -> int array array list

  val decode_int_feed : t -> Ogg.Stream.t -> (int array -> unit) -> unit

  val decode_int_feed_stereo : t -> Ogg.Stream.t -> (int array array -> unit) -> unit

end

module Wrapper : 
sig

  module Decoder :
  sig
    
    exception Not_speex

    type t

    val open_sync : Ogg.Sync.t -> t

    val open_file : string -> t*Unix.file_descr

    val open_feed : (int -> string*int) -> t

    val serial : t -> nativeint

    val comments : t -> (string*string) list

    val header : t -> Header.t

    val decode : t -> float array list

    val decode_stereo : t -> float array array list

    val decode_feed : t -> (float array -> unit) -> unit

    val decode_feed_stereo : t -> (float array array -> unit) -> unit

    val decode_int : t -> int array list

    val decode_int_stereo : t -> int array array list

    val decode_int_feed : t -> (int array -> unit) -> unit

    val decode_int_feed_stereo : t -> (int array array -> unit) -> unit

  end


end
